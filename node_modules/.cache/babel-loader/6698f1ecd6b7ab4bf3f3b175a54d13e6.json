{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pooja/MazarsRepo/src/views/NewPassword/NewPassword.js\",\n    _s = $RefreshSig$();\n\nimport { useForm } from \"react-hook-form\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../../assets/css/style.css\";\nimport \"../../assets/css/media.css\";\nimport Header from \"../../components/Header/Header\";\nimport Footer from \"../../components/Footer/Footer\";\nimport axios from \"axios\";\nimport { baseUrl } from \"../../config/config\";\nimport { useAlert } from \"react-alert\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport classNames from \"classnames\";\nimport Swal from \"sweetalert2\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Alerts from \"../../common/Alerts\";\nimport ResendOtp from \"./ResendOtp\";\nimport { Spinner } from \"reactstrap\";\n\nfunction NewPassword(props) {\n  _s();\n\n  const alert = useAlert();\n  const {\n    register,\n    handleSubmit,\n    errors,\n    getValues,\n    reset\n  } = useForm();\n  const {\n    id\n  } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [isPasswordShow, setPasswordShow] = useState(false);\n  const [isPasswordShow2, setPasswordShow2] = useState(false);\n  const [time, setTime] = useState('');\n  const [disabled, setDisabled] = useState(false);\n  const [load, setLoad] = useState(true);\n\n  const togglePasssword = () => {\n    setPasswordShow(!isPasswordShow);\n  };\n\n  const togglePasssword2 = () => {\n    setPasswordShow2(!isPasswordShow2);\n  };\n\n  useEffect(() => {\n    getTime();\n  }, []);\n\n  const getTime = () => {\n    if (load) {\n      var timerOn = true;\n\n      function timer(remaining) {\n        var s = remaining % 60;\n        s = s < 10 ? '0' + s : s;\n        setTime(s);\n        remaining -= 1;\n\n        if (remaining >= 0 && timerOn) {\n          setTimeout(function () {\n            timer(remaining);\n          }, 1000);\n          return;\n        }\n\n        setDisabled(true);\n      }\n\n      setLoad(false);\n      timer(60);\n    }\n  };\n\n  const onSubmit = value => {\n    console.log(\"value :\", value);\n    setLoading(true);\n    let formData = new FormData(); // formData.append(\"user_id\", value.p_name);\n\n    formData.append(\"email\", value.p_email);\n    formData.append(\"code\", value.p_code);\n    formData.append(\"password\", value.p_password);\n    formData.append(\"rpassword\", value.p_confirm_password);\n    axios({\n      method: \"POST\",\n      url: `${baseUrl}/customers/resetpassword`,\n      data: formData\n    }).then(function (response) {\n      console.log(\"res-\", response);\n\n      if (response.data.code === 1) {\n        setLoading(false);\n        var variable = \"Password reset successfully.\";\n        Alerts.SuccessNormal(variable);\n        reset();\n        props.history.push(\"/\");\n      } else if (response.data.code === 0) {\n        setLoading(false);\n        console.log(response.data.result);\n        Alerts.ErrorNormal(\"Incorrect OTP, please try again.\");\n      }\n    }).catch(error => {\n      console.log(\"erroror - \", error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      cust_sign: \"cust_sign\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"heading\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Reset Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label\",\n                  children: [\"Email\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"declined\",\n                    children: \"*\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 54\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: classNames(\"form-control\", {\n                    \"is-invalid\": errors.p_email\n                  }),\n                  name: \"p_email\",\n                  placeholder: \"Enter Email\",\n                  defaultValue: id,\n                  ref: register({\n                    required: \"This field is required\",\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: \"Please enter valid email address\"\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 19\n                }, this), errors.p_email && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"invalid-feedback\",\n                  children: errors.p_email.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label\",\n                  children: [\"New Password\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"declined\",\n                    children: \"*\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 61\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: isPasswordShow ? \"text\" : \"password\",\n                  name: \"p_password\",\n                  id: \"password\",\n                  className: classNames(\"form-control\", {\n                    \"is-invalid\": errors.p_password\n                  }),\n                  placeholder: \"Enter Your Password\",\n                  autocomplete: \"off\",\n                  ref: register({\n                    required: true,\n                    pattern: {\n                      value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,15}$/,\n                      message: \"Password should be of minimum 8 Characters, including at least 1 upper case, lower case, special character and number.\"\n                    }\n                  }),\n                  onPaste: e => {\n                    e.preventDefault();\n                    return false;\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: `fa ${isPasswordShow ? \"fa-eye-slash\" : \"fa-eye\"} password-icon`,\n                  onClick: togglePasssword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 19\n                }, this), errors.p_password && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"invalid-feedback\",\n                  children: errors.p_password.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label\",\n                  children: [\"Confirm Password\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"declined\",\n                    children: \"*\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: isPasswordShow2 ? \"text\" : \"password\",\n                  id: \"password\",\n                  className: classNames(\"form-control\", {\n                    \"is-invalid\": errors.p_confirm_password\n                  }),\n                  placeholder: \"Confirm Password\",\n                  name: \"p_confirm_password\",\n                  autocomplete: \"off\",\n                  ref: register({\n                    required: true,\n                    validate: value => value === getValues(\"p_password\") || \"Password doesn't match.\"\n                  }),\n                  onPaste: e => {\n                    e.preventDefault();\n                    return false;\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: `fa ${isPasswordShow2 ? \"fa-eye-slash\" : \"fa-eye\"} password-icon`,\n                  onClick: togglePasssword2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 19\n                }, this), errors.p_confirm_password && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"invalid-feedback\",\n                  children: errors.p_confirm_password.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label\",\n                  children: [\"OTP\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"declined\",\n                    children: \"*\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 52\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: classNames(\"form-control\", {\n                    \"is-invalid\": errors.p_code\n                  }),\n                  name: \"p_code\",\n                  placeholder: \"Enter OTP\",\n                  autocomplete: \"off\",\n                  ref: register({\n                    required: true\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 19\n                }, this), errors.p_code && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"invalid-feedback\",\n                  children: errors.p_code.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  class: \"text-center\",\n                  children: [\"Note: OTP is valid for \", time, \" seconds.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-md-12\",\n            children: /*#__PURE__*/_jsxDEV(Spinner, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: disabled ? \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Cancel, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), disabled ? /*#__PURE__*/_jsxDEV(ResendOtp, {\n          id: id,\n          setDisabled: setDisabled,\n          getTime: getTime,\n          setLoad: setLoad,\n          setLoading: setLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"declined\",\n          children: \"*Mandatory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(NewPassword, \"nXrRQx/4BhmMqmmUVftsuwSgOBg=\", false, function () {\n  return [useAlert, useForm, useParams];\n});\n\n_c = NewPassword;\nexport default NewPassword;\n\nconst Cancel = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/customer/forget-password\",\n      style: {\n        \"margin\": \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-secondary\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = Cancel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NewPassword\");\n$RefreshReg$(_c2, \"Cancel\");","map":{"version":3,"sources":["/home/pooja/MazarsRepo/src/views/NewPassword/NewPassword.js"],"names":["useForm","React","useState","useEffect","Header","Footer","axios","baseUrl","useAlert","yupResolver","yup","classNames","Swal","useParams","Link","Alerts","ResendOtp","Spinner","NewPassword","props","alert","register","handleSubmit","errors","getValues","reset","id","loading","setLoading","isPasswordShow","setPasswordShow","isPasswordShow2","setPasswordShow2","time","setTime","disabled","setDisabled","load","setLoad","togglePasssword","togglePasssword2","getTime","timerOn","timer","remaining","s","setTimeout","onSubmit","value","console","log","formData","FormData","append","p_email","p_code","p_password","p_confirm_password","method","url","data","then","response","code","variable","SuccessNormal","history","push","result","ErrorNormal","catch","error","required","pattern","message","e","preventDefault","validate","Cancel"],"mappings":"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","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../../assets/css/style.css\";\nimport \"../../assets/css/media.css\";\nimport Header from \"../../components/Header/Header\";\nimport Footer from \"../../components/Footer/Footer\";\nimport axios from \"axios\";\nimport { baseUrl } from \"../../config/config\";\nimport { useAlert } from \"react-alert\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport classNames from \"classnames\";\nimport Swal from \"sweetalert2\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Alerts from \"../../common/Alerts\";\nimport ResendOtp from \"./ResendOtp\";\nimport { Spinner } from \"reactstrap\";\n\n\n\nfunction NewPassword(props) {\n  const alert = useAlert();\n  const { register, handleSubmit, errors, getValues, reset } = useForm();\n  const { id } = useParams();\n\n  const [loading, setLoading] = useState(false);\n\n  const [isPasswordShow, setPasswordShow] = useState(false);\n  const [isPasswordShow2, setPasswordShow2] = useState(false);\n\n  const [time, setTime] = useState('')\n  const [disabled, setDisabled] = useState(false)\n  const [load, setLoad] = useState(true);\n\n  const togglePasssword = () => {\n    setPasswordShow(!isPasswordShow)\n  };\n\n  const togglePasssword2 = () => {\n    setPasswordShow2(!isPasswordShow2)\n  };\n\n\n  useEffect(() => {\n    getTime()\n  }, []);\n\n  const getTime = () => {\n    if (load) {\n      var timerOn = true;\n      function timer(remaining) {\n        var s = remaining % 60;\n        s = s < 10 ? '0' + s : s;\n        setTime(s)\n        remaining -= 1;\n        if (remaining >= 0 && timerOn) {\n          setTimeout(function () {\n            timer(remaining);\n          }, 1000);\n          return;\n        }\n        setDisabled(true)\n      }\n      setLoad(false)\n      timer(60);\n    }\n\n  }\n\n\n  const onSubmit = (value) => {\n    console.log(\"value :\", value);\n    setLoading(true)\n\n    let formData = new FormData();\n    // formData.append(\"user_id\", value.p_name);\n    formData.append(\"email\", value.p_email);\n    formData.append(\"code\", value.p_code);\n    formData.append(\"password\", value.p_password);\n    formData.append(\"rpassword\", value.p_confirm_password);\n\n    axios({\n      method: \"POST\",\n      url: `${baseUrl}/customers/resetpassword`,\n      data: formData,\n    })\n      .then(function (response) {\n        console.log(\"res-\", response);\n        if (response.data.code === 1) {\n          setLoading(false)\n          var variable = \"Password reset successfully.\"\n          Alerts.SuccessNormal(variable)\n          reset();\n          props.history.push(\"/\");\n        } else if (response.data.code === 0) {\n          setLoading(false)\n          console.log(response.data.result);\n          Alerts.ErrorNormal(\"Incorrect OTP, please try again.\")\n        }\n      })\n      .catch((error) => {\n        console.log(\"erroror - \", error);\n      });\n  };\n\n  return (\n    <>\n      <Header cust_sign=\"cust_sign\" />\n      <div className=\"container\">\n        <div className=\"form\">\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"heading\">\n              <h2>Reset Password</h2>\n            </div>\n            <div className=\"row\">\n\n              <div className=\"col-md-12\">\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">Email<span className=\"declined\">*</span></label>\n                  <input\n                    type=\"text\"\n                    className={classNames(\"form-control\", {\n                      \"is-invalid\": errors.p_email,\n                    })}\n                    name=\"p_email\"\n                    placeholder=\"Enter Email\"\n                    defaultValue={id}\n                    ref={register({\n                      required: \"This field is required\",\n                      pattern: {\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                        message: \"Please enter valid email address\",\n                      },\n                    })}\n                  />\n                  {errors.p_email && (\n                    <div className=\"invalid-feedback\">\n                      {errors.p_email.message}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"col-md-12\">\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">New Password<span className=\"declined\">*</span></label>\n                  <input\n                    type={isPasswordShow ? \"text\" : \"password\"}\n                    name=\"p_password\"\n                    id=\"password\"\n                    className={classNames(\"form-control\", {\n                      \"is-invalid\": errors.p_password,\n                    })}\n                    placeholder=\"Enter Your Password\"\n                    autocomplete=\"off\"\n                    ref={register({\n                      required: true,\n                      pattern: {\n                        value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,15}$/,\n                        message:\n                          \"Password should be of minimum 8 Characters, including at least 1 upper case, lower case, special character and number.\",\n                      },\n                    })}\n                    onPaste={((e) => {\n                      e.preventDefault();\n                      return false;\n                    })}\n                  />\n                  <i\n                    className={`fa ${isPasswordShow ? \"fa-eye-slash\" : \"fa-eye\"} password-icon`}\n                    onClick={togglePasssword}\n                  />\n                  {errors.p_password && (\n                    <div className=\"invalid-feedback\">\n                      {errors.p_password.message}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"col-md-12\">\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">Confirm Password<span className=\"declined\">*</span></label>\n                  <input\n                    type={isPasswordShow2 ? \"text\" : \"password\"}\n                    id=\"password\"\n                    className={classNames(\"form-control\", {\n                      \"is-invalid\": errors.p_confirm_password,\n                    })}\n                    placeholder=\"Confirm Password\"\n                    name=\"p_confirm_password\"\n                    autocomplete=\"off\"\n                    ref={register({\n                      required: true,\n                      validate: (value) =>\n                        value === getValues(\"p_password\") ||\n                        \"Password doesn't match.\",\n                    })}\n                    onPaste={((e) => {\n                      e.preventDefault();\n                      return false;\n                    })}\n                  />\n                  <i\n                    className={`fa ${isPasswordShow2 ? \"fa-eye-slash\" : \"fa-eye\"} password-icon`}\n                    onClick={togglePasssword2}\n                  />\n                  {errors.p_confirm_password && (\n                    <div className=\"invalid-feedback\">\n                      {errors.p_confirm_password.message}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"col-md-12\">\n                <div className=\"mb-3\">\n                  <label className=\"form-label\">OTP<span className=\"declined\">*</span></label>\n                  <input\n                    type=\"text\"\n                    className={classNames(\"form-control\", {\n                      \"is-invalid\": errors.p_code,\n                    })}\n                    name=\"p_code\"\n                    placeholder=\"Enter OTP\"\n                    autocomplete=\"off\"\n                    ref={register({\n                      required: true,\n                    })}\n                  />\n                  {errors.p_code && (\n                    <div className=\"invalid-feedback\">\n                      {errors.p_code.message}\n                    </div>\n                  )}\n                  <small class=\"text-center\">\n                    Note: OTP is valid for {time} seconds.\n                  </small>\n                </div>\n              </div>\n            </div>\n            {\n              loading ?\n                <div class=\"col-md-12\">\n                  <Spinner color=\"primary\" />\n                </div>\n                :\n                <div>\n                  {\n                    disabled ?\n                      \"\"\n                      :\n                      <div>\n                        <button type=\"submit\" className=\"btn btn-primary\" >\n                          Submit\n                        </button>\n                        <Cancel />\n                      </div>\n                  }\n                </div>\n            }\n\n\n          </form>\n\n          {\n            disabled ?\n              <ResendOtp id={id} setDisabled={setDisabled} getTime={getTime}\n                setLoad={setLoad} setLoading={setLoading} />\n              :\n              null\n          }\n\n\n          <span className=\"declined\">*Mandatory</span>\n\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default NewPassword;\n\n\n\nconst Cancel = () => {\n  return (\n    <>\n      <Link to=\"/customer/forget-password\" style={{ \"margin\": \"10px\" }}>\n        <button type=\"submit\" className=\"btn btn-secondary\">\n          Cancel\n        </button>\n      </Link>\n    </>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}